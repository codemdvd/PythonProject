import config
import telebot
from telebot import types
from main import Main

bot = telebot.TeleBot(config.token)
strength = Main.characters_strength
agility = Main.characters_agility
intelligence = Main.characters_intelligence
fav = []
statistics = []


@bot.message_handler(content_types=['text'])
def start(message):
    Main.get_strength()
    Main.get_agility()
    Main.get_intelligence()
    Main.parse_to_json()
    if message.text == '/start':
        bot.send_message(chat_id=message.chat.id,
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! "
                              "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ–≥–æ "
                              "—Ç–µ–±–µ –≥–µ—Ä–æ—è –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É."
                         .format(message.from_user)
                         )
    get_start(message)


@bot.message_handler(content_types=['text'])
def get_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üí™ –°–∏–ª–∞")
    btn2 = types.KeyboardButton("Ôø© Ôø™ Ôø´ –õ–æ–≤–∫–æ—Å—Ç—å")
    btn3 = types.KeyboardButton("‚òÑ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç")
    btn4 = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     "–ö–∞–∫–æ–π –∞—Ç—Ä–∏–±—É—Ç —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º —É —Ç–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è?",
                     reply_markup=markup
                     )
    bot.register_next_step_handler(message, get_attribute)


def get_attribute(message):
    if message.text == "üí™ –°–∏–ª–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ —Å–∏–ª—É")
        btn2 = types.KeyboardButton("‚úñ –ù–∞–∑–∞–¥")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è —Ç—ã –ø–∏–∫–Ω—É–ª?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, get_strength)
    elif message.text == "Ôø© Ôø™ Ôø´ –õ–æ–≤–∫–æ—Å—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ª–æ–≤–∫–æ—Å—Ç—å")
        btn2 = types.KeyboardButton("‚úñ –ù–∞–∑–∞–¥")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è —Ç—ã –ø–∏–∫–Ω—É–ª?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, get_agility)
    elif message.text == "‚òÑ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
        btn2 = types.KeyboardButton("‚úñ –ù–∞–∑–∞–¥")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–≥–æ –≥–µ—Ä–æ—è —Ç—ã –ø–∏–∫–Ω—É–ª?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, get_intelligence)
    elif message.text == "üìã –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π":
        show_fav(message)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∞—Ç—Ä–∏–±—É—Ç")
        bot.register_next_step_handler(message, get_attribute)


def get_strength(message):
    flag = False
    hero = ''
    names = []
    for h in strength:
        names.append(h.name)
    names = (', '.join(names))
    names_str = repr(names)
    for ch in strength:
        if message.text == ch.name:
            bot.send_message(message.chat.id, ch)
            bot.send_photo(message.chat.id, ch.picture)
            hero = ch.name
            flag = True
            back(message, hero)
        elif message.text == "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ —Å–∏–ª—É":
            bot.send_message(message.chat.id, names_str)
            bot.register_next_step_handler(message, get_strength)
            flag = True
            break
        elif message.text == "‚úñ –ù–∞–∑–∞–¥":
            flag = True
            again(message, hero)
            break
    if not flag:
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è –∏–∑ —Å–ø–∏—Å–∫–∞ \"—Å–∏–ª–∞\"")
        bot.register_next_step_handler(message, get_strength)


def get_agility(message):
    flag = False
    hero = ''
    names = []
    for h in agility:
        names.append(h.name)
    names = (', '.join(names))
    names_str = repr(names)
    for ch in agility:
        if message.text == ch.name:
            bot.send_message(message.chat.id, ch)
            bot.send_photo(message.chat.id, ch.picture)
            hero = ch.name
            flag = True
            back(message, hero)
        elif message.text == "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ª–æ–≤–∫–æ—Å—Ç—å":
            bot.send_message(message.chat.id, names_str)
            bot.register_next_step_handler(message, get_agility)
            flag = True
            break
        elif message.text == "‚úñ –ù–∞–∑–∞–¥":
            flag = True
            again(message, hero)
            break
    if not flag:
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è –∏–∑ —Å–ø–∏—Å–∫–∞ \"–ª–æ–≤–∫–æ—Å—Ç—å\"")
        bot.register_next_step_handler(message, get_agility)


def get_intelligence(message):
    flag = False
    hero = ''
    names = []
    for h in intelligence:
        names.append(h.name)
    names = (', '.join(names))
    names_str = repr(names)
    for ch in intelligence:
        if message.text == ch.name:
            bot.send_message(message.chat.id, ch)
            bot.send_photo(message.chat.id, ch.picture)
            hero = ch.name
            flag = True
            back(message, hero)
        elif message.text == "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç":
            bot.send_message(message.chat.id, names_str)
            bot.register_next_step_handler(message, get_intelligence)
            flag = True
            break
        elif message.text == "‚úñ –ù–∞–∑–∞–¥":
            flag = True
            again(message, hero)
            break
    if not flag:
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è –∏–∑ —Å–ø–∏—Å–∫–∞ \"–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\"")
        bot.register_next_step_handler(message, get_intelligence)


def back(message, hero):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚úñ –ù–∞–∑–∞–¥")
    btn2 = types.KeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    btn3 = types.KeyboardButton("‚òë –†–æ–ª–∏")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
                     reply_markup=markup)
    bot.register_next_step_handler(message, again, hero)


def again(message, hero):
    if message.text == "‚úñ –ù–∞–∑–∞–¥":
        get_start(message)
    elif message.text == "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        favourite(message, hero)
    elif message.text == "‚òë –†–æ–ª–∏":
        get_role(message, hero)
    else:
        back(message, hero)


def favourite(message, hero):
    for x in strength:
        statistics.append(x)
    for x in agility:
        statistics.append(x)
    for x in intelligence:
        statistics.append(x)
    for ch in statistics:
        if hero == ch.name:
            new_hero = ch
            if new_hero not in fav:
                fav.append(new_hero)
                bot.send_message(message.chat.id,
                                 "–ì–µ—Ä–æ–π –¥–æ–±–∞–≤–ª–µ–Ω")
                break
            else:
                bot.send_message(message.chat.id,
                                 "–¢—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –≥–µ—Ä–æ—è")
                break
    bot.register_next_step_handler(message, again, hero)


def show_fav(message):
    if not fav:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        bot.register_next_step_handler(message, get_attribute)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("‚Ü∫ –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
        btn2 = types.KeyboardButton("‚úñ –ù–∞–∑–∞–¥")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, " –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=markup)
        fav_str = repr(fav)
        bot.send_message(message.chat.id, ' '.join(fav_str))
        bot.register_next_step_handler(message, delete)


def delete(message):
    if message.text == "‚Ü∫ –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞":
        if len(fav) > 1:
            bot.send_message(message.chat.id,
                             "–í—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è")
            bot.register_next_step_handler(message, delete_end)
        else:
            delete_one(message)
    elif message.text == "‚úñ –ù–∞–∑–∞–¥":
        get_start(message)
    else:
        show_fav(message)


def delete_end(message):
    flag = True

    for ch in fav:
        if message.text == ch.name:
            fav.remove(ch)
            bot.send_message(message.chat.id,
                             "–ì–µ—Ä–æ–π —É–¥–∞–ª—ë–Ω")
            get_start(message)
            flag = False
            break

    if flag:
        delete_ex(message)


def delete_ex(message):
    bot.send_message(message.chat.id,
                     "–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫")
    get_start(message)


def delete_one(message):
    for ch in fav:
        fav.remove(ch)
        bot.send_message(message.chat.id,
                         "–ì–µ—Ä–æ–π —É–¥–∞–ª—ë–Ω")
        get_start(message)


def get_role(message, hero):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("Carry",
                                      url='https://gosu.ai/blog/dota2/'
                                          'how-to-get-better-as-a-carry/')
    btn2 = types.InlineKeyboardButton("Support",
                                      url='https://dmarket.com/'
                                          'blog/'
                                          'how-to-be-a-good-support-in-dota2/')
    btn3 = types.InlineKeyboardButton("Jungle",
                                      url='https://dota2.fandom.com/'
                                          'wiki/Jungling')
    btn4 = types.InlineKeyboardButton("Mid",
                                      url='https://www.hotspawn.com/'
                                          'dota2/guides/'
                                          'flying-solo-how-to'
                                          '-play-mid-in-dota-2')
    btn5 = types.InlineKeyboardButton("Offlane",
                                      url='https://dota2freaks.com/'
                                          'offlane-guide/')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id,
                     "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–∫—É –∏ –ø–æ–ª—É—á–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                     reply_markup=markup)
    bot.register_next_step_handler(message, again, hero)


bot.polling(none_stop=True, interval=0)
